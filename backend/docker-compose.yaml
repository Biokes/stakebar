# # version: '3.8'

# # services:
# #   postgres:
# #     image: postgres:16
# #     container_name: yieldfi_postgres
# #     restart: always
# #     environment:
# #       DB_HOST: ${POSTGRES_HOST}
# #       DB_PORT: ${POSTGRES_PORT}
# #       DB_USERNAME: ${POSTGRES_USER}
# #       DB_PASSWORD: ${POSTGRES_PASSWORD}
# #       DB_NAME: ${POSTGRES_DB}
# #     ports:
# #       - "5432:5432"  
# #     volumes:
# #       - postgres_data:/var/lib/postgresql/data  
# #     networks:
# #       - yieldfi_network
# #     command: 
# #       - "postgres"
# #       - "-c"
# #       - "log_statement=all"
# #     healthcheck:
# #       test: ["CMD-SHELL", "pg_isready -U postgres"]
# #       interval: 10s
# #       timeout: 5s
# #       retries: 5   

# #   backend:
# #     build:
# #       context: .
# #       dockerfile: Dockerfile
# #     container_name: yieldfi_backend
# #     restart: always
# #     environment:
# #       NODE_ENV: development
# #       PORT: 5000
# #       DB_HOST: postgres
# #       DB_PORT: 5432
# #       DB_USERNAME: postgres
# #       DB_PASSWORD: postgres
# #       DB_NAME: yieldfi_db
# #     ports:
# #       - "5000:5000"
# #     depends_on:
# #       postgres:
# #         condition: service_healthy
# #     volumes:
# #       - .:/app
# #       - /app/node_modules
# #     networks:
# #       - yieldfi_network
# #     command: pnpm run server:dev

# # volumes:
# #   postgres_data:

# # networks:
# #   yieldfi_network:


# version: '3.8'

# services:
#   postgres:
#     image: postgres:16
#     container_name: yieldfi_postgres
#     restart: always
#     environment:
#       POSTGRES_USER: ${POSTGRES_USER}
#       POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#       POSTGRES_DB: ${POSTGRES_DB}
#     ports:
#       - "5432:5432"
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U postgres"]
#       interval: 10s
#       timeout: 5s
#       retries: 5

# volumes:
#   postgres_data:

version: '3.9'
services:
  evolution-api:
    container_name: evolution_api
    image: atendai/evolution-api:v2.1.1
    restart: always
    ports:
      - "8080:8080"
    env_file:
      - .env
    volumes:
      - evolution_instances:/evolution/instances

volumes:
  evolution_instances: